// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectD;

#nullable disable

namespace ProjectD.Migrations
{
    [DbContext(typeof(FlightDBContext))]
    [Migration("20250322221611_InitialFlightSchema")]
    partial class InitialFlightSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectD.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActualLocal")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ActualUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Afhandelaar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AircraftDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AircraftRegistration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AircraftType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AirlineFullname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AirlineIATA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AirlineICAO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AirlineShortname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Airport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AirportIATA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AirportICAO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Bagageband")
                        .HasColumnType("integer");

                    b.Property<int>("Bags")
                        .HasColumnType("integer");

                    b.Property<int>("BagsTransit")
                        .HasColumnType("integer");

                    b.Property<double>("BagsTransitWeight")
                        .HasColumnType("double precision");

                    b.Property<double>("BagsWeight")
                        .HasColumnType("double precision");

                    b.Property<string>("Bewegingen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Bus")
                        .HasColumnType("boolean");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CrewCabin")
                        .HasColumnType("integer");

                    b.Property<int>("CrewCockpit")
                        .HasColumnType("integer");

                    b.Property<string>("Datasource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Debiteur")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DebiteurNr")
                        .HasColumnType("integer");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DistanceKilometers")
                        .HasColumnType("double precision");

                    b.Property<bool>("Diverted")
                        .HasColumnType("boolean");

                    b.Property<bool>("EU")
                        .HasColumnType("boolean");

                    b.Property<double>("Elevation")
                        .HasColumnType("double precision");

                    b.Property<string>("FlightClass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlightCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlightCodeDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlightCodeIATA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ForecastBabys")
                        .HasColumnType("integer");

                    b.Property<int>("ForecastPax")
                        .HasColumnType("integer");

                    b.Property<double>("ForecastPercentage")
                        .HasColumnType("double precision");

                    b.Property<string>("Gate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("MTOW")
                        .HasColumnType("integer");

                    b.Property<bool>("Nachtvlucht")
                        .HasColumnType("boolean");

                    b.Property<bool>("Parked")
                        .HasColumnType("boolean");

                    b.Property<string>("Parkeerpositie")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PaxChild")
                        .HasColumnType("integer");

                    b.Property<int>("PaxFemale")
                        .HasColumnType("integer");

                    b.Property<int>("PaxInfant")
                        .HasColumnType("integer");

                    b.Property<int>("PaxMale")
                        .HasColumnType("integer");

                    b.Property<int>("PaxTransitChild")
                        .HasColumnType("integer");

                    b.Property<int>("PaxTransitFemale")
                        .HasColumnType("integer");

                    b.Property<int>("PaxTransitInfant")
                        .HasColumnType("integer");

                    b.Property<int>("PaxTransitMale")
                        .HasColumnType("integer");

                    b.Property<bool>("PublicAnnouncement")
                        .HasColumnType("boolean");

                    b.Property<string>("Runway")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduledLocal")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ScheduledUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Schengen")
                        .HasColumnType("boolean");

                    b.Property<int>("Seats")
                        .HasColumnType("integer");

                    b.Property<string>("Seizoen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TerminalBags")
                        .HasColumnType("integer");

                    b.Property<double>("TerminalBagsWeight")
                        .HasColumnType("double precision");

                    b.Property<int>("TerminalCrew")
                        .HasColumnType("integer");

                    b.Property<int>("TerminalPax")
                        .HasColumnType("integer");

                    b.Property<int>("TerminalPaxBetalend")
                        .HasColumnType("integer");

                    b.Property<int>("TerminalSeats")
                        .HasColumnType("integer");

                    b.Property<int>("TimetableId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalBags")
                        .HasColumnType("integer");

                    b.Property<double>("TotalBagsWeight")
                        .HasColumnType("double precision");

                    b.Property<int>("TotalCrew")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPax")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPaxBetalend")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("integer");

                    b.Property<string>("TrafficType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TransitBags")
                        .HasColumnType("integer");

                    b.Property<double>("TransitBagsWeight")
                        .HasColumnType("double precision");

                    b.Property<int>("TransitPax")
                        .HasColumnType("integer");

                    b.Property<int>("TransitPaxBetalend")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ViaAirport")
                        .HasColumnType("text");

                    b.Property<string>("ViaAirportICAO")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("ProjectD.Touchpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FlightId")
                        .HasColumnType("integer");

                    b.Property<double>("TouchpointPax")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("TouchpointTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TouchpointType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("Touchpoints");
                });

            modelBuilder.Entity("ProjectD.Touchpoint", b =>
                {
                    b.HasOne("ProjectD.Flight", "Flight")
                        .WithMany("Touchpoints")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("ProjectD.Flight", b =>
                {
                    b.Navigation("Touchpoints");
                });
#pragma warning restore 612, 618
        }
    }
}
